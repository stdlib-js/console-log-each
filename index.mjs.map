{"version":3,"file":"index.mjs","sources":["../lib/main.js"],"sourcesContent":["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2022 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport { isPrimitive as isString } from '@stdlib/assert-is-string';\nimport isCollection from '@stdlib/assert-is-collection';\nimport resolveGetter from '@stdlib/array-base-resolve-getter';\nimport format from '@stdlib/string-format';\nimport logger from '@stdlib/console-log';\n\n\n// MAIN //\n\n/**\n* Inserts array element values into a format string and prints the result.\n*\n* @param {string} str - format string\n* @param {...(Collection|*)} args - collections or values\n* @throws {TypeError} first argument must be a string\n* @throws {RangeError} provided collections must have the same length\n* @returns {void}\n*/\nfunction logEach( str ) {\n\tvar strides;\n\tvar offsets;\n\tvar getters;\n\tvar values;\n\tvar nargs;\n\tvar args;\n\tvar len;\n\tvar v;\n\tvar s;\n\tvar i;\n\tvar j;\n\tif ( !isString( str ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. First argument must be a string. Value: `%s`.', str ) );\n\t}\n\tnargs = arguments.length;\n\tgetters = [];\n\tstrides = [];\n\targs = [];\n\tfor ( i = 1; i < nargs; i++ ) {\n\t\tv = arguments[ i ];\n\t\tif ( isCollection( v ) ) {\n\t\t\tgetters.push( resolveGetter( v ) );\n\t\t\targs.push( v );\n\t\t\tstrides.push( 1 );\n\t\t\tlen = v.length;\n\t\t\ti += 1;\n\t\t\tbreak;\n\t\t} else {\n\t\t\tv = [ v ];\n\t\t\tgetters.push( resolveGetter( v ) );\n\t\t\targs.push( v );\n\t\t\tstrides.push( 0 );\n\t\t}\n\t}\n\tif ( len === void 0 ) {\n\t\tlen = 1;\n\t}\n\tfor ( ; i < nargs; i++ ) {\n\t\tv = arguments[ i ];\n\t\tif ( isCollection( v ) ) {\n\t\t\tif ( v.length !== len ) {\n\t\t\t\tthrow new RangeError( 'invalid argument. Provided collections must have the same length.' );\n\t\t\t}\n\t\t\ts = 1;\n\t\t} else {\n\t\t\tv = [ v ];\n\t\t\ts = 0;\n\t\t}\n\t\tgetters.push( resolveGetter( v ) );\n\t\targs.push( v );\n\t\tstrides.push( s );\n\t}\n\tvalues = [ str ];\n\toffsets = [];\n\tfor ( i = 1; i < nargs; i++ ) {\n\t\tvalues.push( null );\n\t\toffsets.push( 0 );\n\t}\n\tfor ( i = 0; i < len; i++ ) {\n\t\tfor ( j = 0; j < nargs-1; j++ ) {\n\t\t\tvalues[ j+1 ] = getters[ j ]( args[ j ], offsets[ j ] );\n\t\t\toffsets[ j ] += strides[ j ];\n\t\t}\n\t\tlogger( format.apply( null, values ) );\n\t}\n}\n\n\n// EXPORTS //\n\nexport default logEach;\n"],"names":["logEach","str","strides","offsets","getters","values","nargs","args","len","v","s","i","j","isString","TypeError","format","arguments","length","isCollection","push","resolveGetter","RangeError","logger","apply"],"mappings":";;2dAwCA,SAASA,EAASC,GACjB,IAAIC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACJ,IAAMC,EAAUZ,GACf,MAAM,IAAIa,UAAWC,EAAQ,kEAAmEd,IAMjG,IAJAK,EAAQU,UAAUC,OAClBb,EAAU,GACVF,EAAU,GACVK,EAAO,GACDI,EAAI,EAAGA,EAAIL,EAAOK,IAAM,CAE7B,GAAKO,EADLT,EAAIO,UAAWL,IACU,CACxBP,EAAQe,KAAMC,EAAeX,IAC7BF,EAAKY,KAAMV,GACXP,EAAQiB,KAAM,GACdX,EAAMC,EAAEQ,OACRN,GAAK,EACL,KACH,CACGF,EAAI,CAAEA,GACNL,EAAQe,KAAMC,EAAeX,IAC7BF,EAAKY,KAAMV,GACXP,EAAQiB,KAAM,EAEf,CAID,SAHa,IAARX,IACJA,EAAM,GAECG,EAAIL,EAAOK,IAAM,CAExB,GAAKO,EADLT,EAAIO,UAAWL,IACU,CACxB,GAAKF,EAAEQ,SAAWT,EACjB,MAAM,IAAIa,WAAY,qEAEvBX,EAAI,CACP,MACGD,EAAI,CAAEA,GACNC,EAAI,EAELN,EAAQe,KAAMC,EAAeX,IAC7BF,EAAKY,KAAMV,GACXP,EAAQiB,KAAMT,EACd,CAGD,IAFAL,EAAS,CAAEJ,GACXE,EAAU,GACJQ,EAAI,EAAGA,EAAIL,EAAOK,IACvBN,EAAOc,KAAM,MACbhB,EAAQgB,KAAM,GAEf,IAAMR,EAAI,EAAGA,EAAIH,EAAKG,IAAM,CAC3B,IAAMC,EAAI,EAAGA,EAAIN,EAAM,EAAGM,IACzBP,EAAQO,EAAE,GAAMR,EAASQ,GAAKL,EAAMK,GAAKT,EAASS,IAClDT,EAASS,IAAOV,EAASU,GAE1BU,EAAQP,EAAOQ,MAAO,KAAMlB,GAC5B,CACF"}